import logging
import asyncio
from re import search
import sys
from typing import Any
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, Dispatcher, types, F, Router, html
from aiogram.types import Message, KeyboardButton, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardMarkup, InlineKeyboardMarkup
import cx_Oracle
import config
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.storage.memory import MemoryStorage
import datetime
import time
from threading import Thread
import pyowm
from pyowm.utils.config import get_default_config
from vk_api import VkApi

form_router = Router()

class Form(StatesGroup):
    type_group_teacher = State()
    name = State()
    time_sleep_notifications = State()


TOKEN = config.TOKEN
dp = Dispatcher(storage=MemoryStorage())
conn = cx_Oracle.connect('hr/hr2020@ORCLPDB')
cursor = conn.cursor()
logger = logging.getLogger(__name__)
owm = pyowm.OWM(config.TOKEN_OWM)

lesson_time = {1: '09:00-10:30',
               2: '10:40-12:10',
               3: '12:40-14:10',
               4: '14:20-15:50',
               5: '16:00-17:30',
               6: '18:30-20:00',
               7: '20:10-21:40'}


builder_main = [[KeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
                 KeyboardButton(text='–ù–æ–≤–æ—Å—Ç–∏'),
                 KeyboardButton(text = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')],
                [KeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å')]]
markup_main = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=builder_main)
builder_main_admin = [[KeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
                 KeyboardButton(text='–ù–æ–≤–æ—Å—Ç–∏'),
                 KeyboardButton(text = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')],
                [KeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å')],[
                 KeyboardButton(text = '–ó–∞–ø—É—Å–∫ –ø–æ–≥–æ–¥—ã'),
                 KeyboardButton(text = 'üõé –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'),
                 KeyboardButton(text = '–ó–∞–ø—É—Å–∫ –≤–∫ –≥—Ä—É–ø–ø'),
                 KeyboardButton(text='–ó–∞–ø—É—Å–∫ —Å–∫–ª–µ–π–∫–∏')]]
markup_main_admin = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=builder_main_admin)
#+
def _today():                                                     # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏          
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –∑–Ω–∞–º–∏–Ω–∞—Ç–µ–ª—è —á–∏—Å–ª–∏—Ç–µ–ª—è

    Returns:
        string: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ —á–∏—Å–ª–∏—Ç–µ–ª—å  –∏–ª–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 
        –°–µ–≥–æ–¥–Ω—è  –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
    """
    day_number = datetime.datetime.now().isocalendar()[2]          # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    week_number = datetime.datetime.now().isocalendar()[1]%2          # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    if day_number == 1:                                                                     
        day_string = '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
    elif day_number == 2:
        day_string = '–≤—Ç–æ—Ä–Ω–∏–∫'
    elif day_number == 3:
        day_string = '—Å—Ä–µ–¥–∞'
    elif day_number == 4:
        day_string = '—á–µ—Ç–≤–µ—Ä–≥'
    elif day_number == 5:
        day_string = '–ø—è—Ç–Ω–∏—Ü–∞'
    elif day_number == 6:
        day_string = '—Å—É–±–±–æ—Ç–∞'
    elif day_number == 7:
        day_string = '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç—Ä–æ–∫—É —á–∏—Å–ª–∏—Ç–µ–ª—å –∏–ª–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–µ—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏
    if week_number == 0:
        week_string = '—á–∏—Å–ª–∏—Ç–µ–ª—å'
    elif week_number == 1:
        week_string = '–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å'

    today_string = ('–°–µ–≥–æ–¥–Ω—è ' + day_string + ', ' + week_string)     # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

    return today_string                 # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
#-
async def auth_handler():
    
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞) 
    Returns:
        _type_: _description_
    """
    key = input('Enter authentication code: ')
    return key, True

# + - 
async def getAttachments(msg, vk):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑  –ø–æ—Å—Ç–∞  –Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ –Ω–∞–¥–æ –±—É–¥–µ—Ç –µ—â—ë —Å —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è 

    Args:
        msg (_type_): _description_
        vk (_type_): _description_

    Returns:
        _type_: _description_
    """    
    attachList = []

    for att in msg['attachments'][0:]:

        attType = att.get('type')

        attachment = att[attType]

        if attType == 'photo':  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

            for photoType in attachment.get('sizes')[0:]:
                if photoType.get('type') == 'x':  # <=604x604
                    attachments = photoType.get('url')
                if photoType.get('type') == 'y':  # >605x605
                    attachments = photoType.get('url')
                if photoType.get('type') == 'z':  # <=1280x720
                    attachments = photoType.get('url')
                if photoType.get('type') == 'w':  # >1280x720
                    attachments = photoType.get('url')  # <=2560x1440
                    attType = 'other'

        elif attType == 'doc':  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:
            # –ü—Ä–æ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç—É—Ç: https://vk.com/dev/objects/doc
            docType = attachment.get('type')
            if docType != 3 and docType != 4 and docType != 5:
                attType = 'other'
            if attachment.get('url'):
                attachments = attachment.get('url')

        elif attType == 'sticker':  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã:
            for sticker in attachment.get('images')[0:]:
                # –ú–æ–∂–Ω–æ 256 –∏–ª–∏ 512, –Ω–æ –±—É–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –æ–≥—Ä–æ–º–Ω–∞—è –ø–∏–∫—á–∞
                if sticker.get('width') == 128:
                    attachments = sticker.get('url')

        elif attType == 'audio':
            attachments = str('ùÖ† ' + attachment.get('artist') + ' - ' +
                              attachment.get('title') + ' ùÖ†')
            attType = 'other'

        elif attType == 'audio_message':
            attachments = attachment.get('link_ogg')

        elif attType == 'video':

            ownerId = str(attachment.get('owner_id'))
            videoId = str(attachment.get('id'))
            accesskey = str(attachment.get('access_key'))

            fullURL = str(ownerId + '_' + videoId + '_' + accesskey)

            attachments = vk.video.get(videos=fullURL)['items'][0].get('player')

        elif attType == 'graffiti':
            attType = 'other'
            attachments = attachment.get('url')

        elif attType == 'link':
            attType = 'other'
            attachments = attachment.get('url')

        elif attType == 'wall':
            attType = 'other'
            attachments = 'https://vk.com/wall'
            from_id = str(attachment.get('from_id'))
            post_id = str(attachment.get('id'))
            attachments += from_id + '_' + post_id

        elif attType == 'wall_reply':
            attType = 'other'
            attachments = 'https://vk.com/wall'
            owner_id = str(attachment.get('owner_id'))
            reply_id = str(attachment.get('id'))
            post_id = str(attachment.get('post_id'))
            attachments += owner_id + '_' + post_id
            attachments += '?reply=' + reply_id

        elif attType == 'poll':
            attType = 'other'
            attachments = 'https://vk.com/poll'
            owner_id = str(attachment.get('owner_id'))
            poll_id = str(attachment.get('id'))
            attachments += owner_id + '_' + poll_id
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø?
        else:

            attachments = None

        attachList.append({'type': attType,
                           'link': attachments})

    # print( attachList )

    return attachList[0]

""" 
–ï—Å—Ç—å –º—ã—Å–ª—å  –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–µ –µ—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–∑–æ–≤—É—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é 
–≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–µ–º —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –∏–ª–∏ –∂–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 
–¢–∞–∫ –∫–∞–∫ –µ—Å–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø—É—Å—Ç—è—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –±–æ—Ç –º–æ–∂–µ—Ç –ª–µ—á—å  –≤ —Ç–µ–æ—Ä–∏–∏ 
"""
# +
async def vk_groups(message):
    """_summary_
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É  –¥–∞–Ω–Ω—ã—Ö starostat_news c –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 1 —á–∞—Å
    Args:
        message (_type_): —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –æ —Ç–æ–º –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ 
        –≤—Ä–µ–º—è ,–∏–º—è , –∫–∞–∫–æ–π id —á–∞—Ç–∞, –ª—É—á—à–µ –±—É–¥–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–∏–µ—Ç—å –≤—Å—é —ç—Ç—É –∏–Ω—Ñ—É —Å–∞–º–æ–º—É –µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–æ–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º
    """
    #–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    vk_session = VkApi(config.login, config.password, auth_handler=auth_handler)
    vk_session.auth()
    vk = vk_session.get_api()
    #–°–ø–∏—Å–æ–∫ —Å –≥—Ä—É–ø–ø–∞–º–∏, –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    owner = ['-179693938','470321723','-3375573','-1164947','-181129762']
    #–°–ª–æ–≤–∞—Ä—å —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏ –µ–≥–æ –∏–º–µ–Ω–µ–º
    author = {'-179693938': '–°–¢–ò –ù–ò–¢–£ "–ú–ò–°–∏–°"','470321723': '–î–∏—Ä–µ–∫—Ç–æ—Ä','-3375573': '–ì–°–°','-1164947': '–§–°–°','-181129762': '–°–ú–£'}
    texts = []
    texts_m = []
    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –≤ –≥—Ä—É–ø–ø–∞—Ö —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 1 —á–∞—Å
    time_zone = 10800
    await message.answer ('–§—É–Ω–∫—Ü–∏—è –≤–∫ –≥—Ä—É–ø–ø—ã - –∑–∞–ø—É—â–µ–Ω–∞')
    while True:
        #–ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø
        for i in owner:
            check_id_sql = """SELECT date_news, time_news from starostat_news where origin_source = :idd"""
            record = cursor.execute(check_id_sql, [i]).fetchall()
            posts = vk.wall.get(owner_id=i, count=3)['items']
            posts_strings = [post['text'] for post in posts]
            posts_time = [post['date'] for post in posts]


            #–°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏
            global —Åount, count_news
            count = 0
            count_news = 0


            # –î–µ–ª–∞–µ–º –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫—É, —Ç–∞–∫ –∫–∞–∫ —Å–º–∞–π–ª–∏–∫–∏ –≤ –ø–æ—Å—Ç–∞—Ö –≤—ã–∑—ã–≤–∞—é—Ç –æ—à–∏–±–∫—É
            for post in posts_strings:
                text_one = post.split(" ")
                text = " ".join(text_one).encode('cp1251', 'ignore').decode('cp1251', 'ignore')
                texts.append(text)
            
            #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –∞–±—Å–æ–ª—é–¥–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞  –µ—â—ë +3 —á–∞—Å–∞ –ø–æ –º—Å–∫
            for text in texts:
                time = datetime.datetime.utcfromtimestamp(posts_time[count]+time_zone)
                time_news = time.strftime('%H:%M:%S')
                date_news = time.strftime("%d.%m.%y")
                # print((post.encode('cp1251', 'ignore').decode('cp1251', 'ignore')))

                msg = vk.wall.get(owner_id=i, count=3)['items'][count]
                
                #–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞ –∏–ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–π –ø–æ—Å—Ç —á–µ–ª–æ–≤–µ–∫–∞
                try:
                    #print('\n---------------------------------------------------------------------------------\n',
                    #      '–ü–µ—Ä–µ—Å—ã–ª–∫–∞\n')
                    url = await getAttachments(msg['copy_history'][0],vk)
                    url = '\n' + url['link'] + '\n'
                    posts_copy_history = msg['copy_history'][0]
                    posts_strings = posts_copy_history['text']
                    text_one = posts_strings.split(" ")
                    text = " ".join(text_one).encode('cp1251', 'ignore').decode('cp1251', 'ignore')
                    text = text + url

                except:
                    #print('\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n',
                    #      '–õ–∏—á–Ω—ã–π –ø–æ—Å—Ç\n')
                    url = await getAttachments(msg,vk)
                    url = '\n' + url['link'] + '\n'
                    text = text + url
                    #–ï—Å–ª–∏ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≤ –≤—ã—Ç—è–≥–∏–≤–∞—Ç—å –∫–∞–∂–¥—É—é —Ñ–æ—Ç–∫—É, —Ç–æ —Ä–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏ —Å–ø–∏—Å–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å
                    # for ur in url_m:
                    #     url = '\n' + ur['link'] + '\n'
                    #     text = text + url
                #–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –±–∞–∑–µ –∑–∞–ø–∏—Å—å —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –¥–Ω–µ–º
                for rec in record:
                    if rec[0] == date_news and time_news == rec[1]:
                        count_news = count_news + 1


                if count_news > 0 or text is None or text == '':
                    pass
                    #print('–ù–æ–≤—Å—Ç—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ','---','–ü—É—Å—Ç–æ–π –ø–æ—Å—Ç','---','–ü–µ—Ä–µ—Å—ã–ª–∫–∞')
                else:
                    id_news_table = """SELECT id_news from starostat_news """
                    records = cursor.execute(id_news_table, ).fetchall()
                    id_news = int(records[-1][-1]) + 1
                    sqlite_insert_with_param = """INSERT INTO starostat_news
                                          (id_news, date_news, time_news, author, text, origin_source)
                                          VALUES (:id_news, :date_news, :time_news, :author, :text, :idd)"""

                    authors = author[i]
                    data_tuple = {'id_news': int(id_news), 'date_news': date_news, 'time_news': time_news,
                                  'author': authors, 'text': text, 'idd': i}
                    cursor.execute(sqlite_insert_with_param, data_tuple)
                    conn.commit()
                    #print(f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Python {data_tuple} —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É startostat_news")
                count_news = 0
                count = count + 1
            texts = []

        await asyncio.sleep(3600) #–ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑ –≤ —á–∞—Å


# -
async def insert_varible_into_table_group(id_user, group_name, message: Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î –∫–∞–∫ —É—á–µ–Ω–∏–∫–æ–≤

    Args:
        id_user (_type_): id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ 
        group_name (_type_):–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–ø—Ä–∏–º–µ—Ä –ò–¢-20-1–¥)
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    try:
        sqlite_insert_with_param = """INSERT INTO users
                              (id_user, group_name)
                              VALUES (:id_user, :group_name)"""
        data_tuple = {'id_user': id_user, 'group_name': group_name}
        cursor.execute(sqlite_insert_with_param, data_tuple)
        conn.commit()
        print("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Python —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É users")
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!', reply_markup=markup_main)
    except cx_Oracle.Error as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Oracle", error)

# -
async def insert_varible_into_table_teacher(id_user, FIO, message: Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª–µ–π 

    Args:
        id_user (_type_): id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ 
        FIO (_type_): –§–ò–û –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—è 
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
    try:
        sqlite_insert_with_param = """INSERT INTO users
                              (id_user, FIO)
                              VALUES (:id_user, :FIO)"""
        data_tuple = {'id_user': id_user, 'FIO': FIO}
        cursor.execute(sqlite_insert_with_param, data_tuple)
        conn.commit()
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!', reply_markup=markup_main)
        print("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Python —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É users")

    except cx_Oracle.Error as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)

# -
async def read_lesson_teacher(id_user, daynum, weeknum, message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î –ø–∞—Ä –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏

    Args:
        id_user (_type_): id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ 
        daynum (_type_): –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ 
        weeknum (_type_): –ß–∏—Å–ª–∏—Ç–µ–ª—å –∏–ª–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
    group_name_users = """SELECT lower(FIO) from users where id_user =: id_user"""
    records = cursor.execute(group_name_users, [id_user]).fetchall()
    teachers = records[0][0]
    sql = """SELECT * FROM schedule WHERE lower(teacher) = lower(:teachers) AND day_number = :daynum and week = :weeknum ORDER BY number_lesson"""
    num = cursor.execute(sql, {'teachers': teachers, 'daynum': daynum, 'weeknum': weeknum}).fetchall()
    #print(records[0][0], daynum, weeknum)
    d = {}
    for row in num:
        key = f"{row[1]} {row[2]}"
        if key in d:
            d[key].append(row[0])
        else:
            d[key] = [row[0]]

    if num:
        for row in num:
            key = f"{row[1]} {row[2]}"
            if not d[key]:
                continue
            await message.answer(
                f'<u><b>{row[1]} –ø–∞—Ä–∞ - {lesson_time[row[1]]}:</b></u>\n'
                f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {row[2]}\n<b>–ì—Ä—É–ø–ø–∞(—ã):</b> {", ".join(d[key])}\n'
                f'<b>–§–æ—Ä–º–∞—Ç:</b> {row[3]}\n<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {row[5]}')
            #print(f'{row[1]} –ø–∞—Ä–∞ - {lesson_time[row[1]]}:\n{row[2]}\n{", ".join(d[key])}\n{row[3]}\n{row[5]}')
            d[key] = []

        # bot.send_message(message.chat.id, f"http://r.sf-misis.ru/teacher/{num[0][0]}")
    else:
        daynum_schedule = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' if daynum == 1 else ('–≤—Ç–æ—Ä–Ω–∏–∫' if daynum == 2 else (
            '—Å—Ä–µ–¥—É' if daynum == 3 else ('—á–µ—Ç–≤–µ—Ä–≥' if daynum == 4 else (
                '–ø—è—Ç–Ω–∏—Ü—É' if daynum == 5 else ('—Å—É–±–±–æ—Ç—É' if daynum == 6 else ('–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'))))))]
        week_schedule = ['—á–∏—Å–ª–∏—Ç–µ–ª—é' if weeknum == 0 else ('–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é')]
        await message.answer(f'–£ –≤–∞—Å –≤ {daynum_schedule[0]} –ø–æ {week_schedule[0]} –Ω–µ—Ç –ø–∞—Ä!')

# -
async def read_lesson(id_user, daynum, weeknum, message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î –ø–∞—Ä –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏

    Args:
        id_user (_type_): id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ 
        daynum (_type_): –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ 
        weeknum (_type_): –ß–∏—Å–ª–∏—Ç–µ–ª—å –∏–ª–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
    group_name_users = """SELECT group_name from users where id_user =: id_user"""
    records = cursor.execute(group_name_users, [id_user]).fetchall()
    group_name = records[0][0]
    sql = """SELECT * FROM schedule WHERE lower(group_name) = lower(:group_name) AND day_number = :daynum and week = :weeknum ORDER BY number_lesson"""
    num = cursor.execute(sql, {'group_name': group_name, 'daynum': daynum, 'weeknum': weeknum}).fetchall()
    #print(records[0][0], daynum, weeknum)
    if num:
        for row in num:
            #print(row)
            await message.answer(
                f'<u><b>{row[1]} –ø–∞—Ä–∞ - {lesson_time[row[1]]}</b></u>:\n'
                f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {row[2]}\n<b>–ü—Ä–µ–ø–æ–¥.:</b> {row[4]}\n'
                f'<b>–§–æ—Ä–º–∞—Ç: </b>{row[3]}\n<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {row[5]}')
            # bot.send_message(message.chat.id, f"http://r.sf-misis.ru/group/{num[0][0]}")
    else:
        daynum_schedule = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' if daynum == 1 else ('–≤—Ç–æ—Ä–Ω–∏–∫' if daynum == 2 else (
            '—Å—Ä–µ–¥—É' if daynum == 3 else ('—á–µ—Ç–≤–µ—Ä–≥' if daynum == 4 else (
                '–ø—è—Ç–Ω–∏—Ü—É' if daynum == 5 else ('—Å—É–±–±–æ—Ç—É' if daynum == 6 else ('–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'))))))]
        week_schedule = ['—á–∏—Å–ª–∏—Ç–µ–ª—é' if weeknum == 0 else ('–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é')]
        await message.answer(f'–£ –≤–∞—Å –≤ {daynum_schedule[0]} –ø–æ {week_schedule[0]} –Ω–µ—Ç –ø–∞—Ä!')

# -
async def schedule(id_user, daynum, weeknum, message: Message):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—å –∏ –∑–∞–ø—É—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞

    Args:
        id_user (_type_): id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ 
        daynum (_type_): –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ 
        weeknum (_type_): –ß–∏—Å–ª–∏—Ç–µ–ª—å –∏–ª–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
    try:
        group_name_users = """SELECT group_name from users where id_user =: id_user"""
        records = cursor.execute(group_name_users, [id_user]).fetchall()
        if records[0][0] != None:
            await read_lesson(id_user, daynum, weeknum, message)
        else:
            await read_lesson_teacher(id_user, daynum, weeknum, message)
    except:
        await message.answer('–û—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')


# —Å–∫–ª–µ–π–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
#   --- 
async def update_news_table(message: Message):
    """—Å–∫–ª–µ–π–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
    await message.answer ("–§—É–Ω–∫—Ü–∏—è —Å–∫–ª–µ–π–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π - –∑–∞–ø—É—â–µ–Ω–∞")
    flag = True
    while True:
        news_count = 0
        while flag:
            news_rownum_sql = """SELECT id_news, date_news, time_news, author, text from starostat_news"""
            rownum_sql = cursor.execute(news_rownum_sql, ).fetchall()
            #print(rownum_sql[0])
            count = 0
            for i in range(1, len(rownum_sql)):
                if rownum_sql[i][1] == rownum_sql[i - 1][1] and rownum_sql[i][2][0:5] == rownum_sql[i - 1][2][0:5] and rownum_sql[i - 1][3] == rownum_sql[i][3] and (len(rownum_sql[i][4].encode('utf-8'))+len(rownum_sql[i-1][4].encode('utf-8'))) < 4000:
                    #print(len(rownum_sql[i-1][4].encode('utf-8')), ' -------------------------', len(rownum_sql[i][4].encode('utf-8')))
                    update_table_str = """UPDATE starostat_news SET text =: text  where id_news =: id_news"""
                    text = rownum_sql[i - 1][4] + '\n' + rownum_sql[i][4]
                    id_news = rownum_sql[i - 1][0]
                    update_table_dict = {'text': text, 'id_news': id_news}
                    update_table = cursor.execute(update_table_str, update_table_dict)
                    conn.commit()
                    id_news_d = rownum_sql[i][0]
                    delete_table_str = """DELETE FROM starostat_news where id_news =: id_news_d"""
                    delete_table = cursor.execute(delete_table_str, [id_news_d])
                    conn.commit()
                    #print('—É—Å–ø–µ—à–Ω–æ: ', rownum_sql[i - 1][4] + '\n' + rownum_sql[i][4], ' ', [rownum_sql[i][0]])
                    news_count = news_count + 1
                    break
                else:
                    count = count + 1
                    # print(rownum_sql[i-1][2][0:5],int(rownum_sql[i-1][2][3:5])-1)
                    if count == len((rownum_sql)) - 1:
                        flag = False
        if news_count > 0:
            pass
            #await message.answer(f'–£—Å–ø–µ—à–Ω–æ —Å–∫–ª–µ–µ–Ω–æ {news_count} –Ω–æ–≤–æ—Å—Ç–∏(–µ–π)')
        else:
            pass
            #await message.answer("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è")
        await asyncio.sleep(60)
#news(message.from_user.id, message)

#-
async def news(id_user, message: Message,type):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –±–¥ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ –∫–æ—Ç–æ—Ä—É—é –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –≤—ã–≤–æ–¥–∞ –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 

    Args:
        id_user (_type_): id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ 
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        type (_type_): –¢–∏–ø –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Å—Ç–∞—Ä–æ—Å—Ç–∞—Ç–∞ , –≥—Ä—É–ø–ø –≤–∫ –∏–ª–∏ –∂–µ –ø–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
    """    
    news_rownum_sql = """SELECT id_news from starostat_news"""
    rownum_sql = cursor.execute(news_rownum_sql, ).fetchall()
    end_news = int(len(rownum_sql))

    if(type[-2:]=='05'):
        len_news=5
        print(type[-2:])
    else:
        len_news=10

    print("ID user:", id_user)
    #–ï—Å–ª–∏ –ø—Ä–∏—à–µ—Ç —á—Ç–æ –≤—Å—ë —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ—Ç—Ä–µ–ª —Ç–æ –Ω–∞–¥–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ 
    if(type[:-2]=='starostat'):
        news_news_sql = f"""SELECT * from starostat_news  where id_news in ( select id_news
from (select INSTR(b.news_view, a.id_news) as newss, b.news_view, a.id_news from starostat_news a, users b where id_user = {id_user} and (origin_source is null )) a
where (a.newss = 0 or a.newss is null) and rownum <= {len_news} )"""
    elif(type[:-2]=='group'):
        news_news_sql = f"""  SELECT * from starostat_news  where id_news in ( select id_news
from (select INSTR(b.news_view, a.id_news) as newss, b.news_view, a.id_news from starostat_news a, users b where id_user = 411892636 and (a.origin_source = -179693938 
or origin_source='-181129762'or origin_source='-1164947' or origin_source='-3375573' or origin_source='470321723' )) a
where (a.newss = 0 or a.newss is null) and  rownum <= {len_news} ) """
    elif(type[:-2]=='job'):
        news_news_sql = f"""SELECT * from starostat_news  where id_news in ( select id_news
from (select INSTR(b.news_view, a.id_news) as newss, b.news_view, a.id_news from starostat_news a, users b where id_user = {id_user} and (text like '%—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤%' )) a
where (a.newss = 0 or a.newss is null) and rownum <= {len_news} )"""
    
    
    records = cursor.execute(news_news_sql, ).fetchall()

    news_rownum_user_news_view = """SELECT news_view from users where id_user =: id_user"""
    news_rownum = cursor.execute(news_rownum_user_news_view, [id_user]).fetchall()
    count = 0
    for x in records:
        print(x)
    
    for row in news_rownum:
        news_rownum_news = str(row[0])
        
    for i in records:
        print (i)
        news_rownum_count = news_rownum_news.split(',')
        test_1 = str(i[4]).split(' ')
        print(str(test_1[0]) not in news_rownum_count)

        if str(test_1[0]) not in news_rownum_count:
            print(str(i[0]))
            
            news_rownum_news = news_rownum_news + ',' + str(i[0])
            update_rownum = """UPDATE users SET news_view =: news_rownum_news where id_user =: id_user"""
            update_rownum_news = cursor.execute(update_rownum,
                                                {'news_rownum_news': news_rownum_news, 'id_user': id_user})
            conn.commit()
            await message.answer(f'{i[3]}\n {i[1]} - {i[2]}\n{i[4]}')
            count = count + 1
    if count == 0:
        await message.answer(f'–í—ã –≤—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏, –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç!')

#-
async def news_all(id_user):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –±–¥ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π  (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–π—á–∞—Å)

    Args:
        id_user (_type_): id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ
    """   
    news_rownum_user = """SELECT news_view from users"""
    news_rownum = cursor.execute(news_rownum_user, ).fetchall()
    mews = news_rownum[0][0]
    news_news_user = """SELECT date_news, time_news, author, text from starostat_news where id_news <>: mews"""
    news_news = cursor.execute(news_news_user, [mews]).fetchall()
    #print(news_news)

    # builder_i = [
    #     [InlineKeyboardButton(text='–ü–ù', callback_data='ss'), InlineKeyboardButton(text='–í–¢', callback_data='sdsa'),
    #      InlineKeyboardButton(text='–°–†', callback_data='sdsa'), InlineKeyboardButton(text='–ß–¢', callback_data='sdsa'),
    #      InlineKeyboardButton(text='–ü–¢', callback_data='sdsa'), InlineKeyboardButton(text='–°–ë', callback_data='sdsa')]]
    # keyboard1 = InlineKeyboardMarkup(inline_keyboard=builder_i)
    # await message.answer("–ö–∞–∫ –ø–æ–¥–∞–≤–∞—Ç—å –∫–æ—Ç–ª–µ—Ç—ã?", reply_markup=keyboard1)
#-
async def lk(message: Message):
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–¥ –∏ –≤—ã–≤–æ–¥ —ç—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω 

    Args:
        message (Message):  —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
    group_name_users = """SELECT group_name from users where id_user =: id_user"""
    records = cursor.execute(group_name_users, [message.from_user.id]).fetchall()
    if records[0][0] != None:
        group_name_users = """SELECT group_name, notifications from users where id_user =: id_user"""
        records = cursor.execute(group_name_users, [message.from_user.id]).fetchall()
        group_name = records[0][0]
        notifications = [f'–∑–∞ {records[0][1]} –º–∏–Ω—É—Ç—ã' if records[0][1] != None else '–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã']
        await message.answer(f'–ü—Ä–æ—Ñ–∏–ª—å: —Å—Ç—É–¥–µ–Ω—Ç\n'
                             f'–ì—Ä—É–ø–ø–∞: {group_name}\n'
                             f'–ü–æ–¥–≥—Ä—É–ø–ø–∞: \n'
                             f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications[0]}\n\n'
                             f'–î–ª—è —Å–±—Ä–æ—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /delete')
    else:
        group_name_users = """SELECT FIO, notifications from users where id_user =: id_user"""
        records = cursor.execute(group_name_users, [message.from_user.id]).fetchall()
        FIO = records[0][0]
        notifications = [f'–∑–∞ {records[0][1]} –º–∏–Ω—É—Ç—ã' if records[0][1] != None else '–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã']
        await message.answer(f'–ü—Ä–æ—Ñ–∏–ª—å: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å\n'
                             f'–§–ò–û: {FIO}\n'
                             f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications[0]}\n\n'
                             f'–î–ª—è —Å–±—Ä–æ—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /delete')
#-
async def weather(message: Message):
    """–§—É–Ω–∫—Ü–∏—è  —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–≥–æ–¥—ã –∏ –ø–∞—Ä 

    Args:
        message (Message):  —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
    flag_time_sleep = True
    await message.answer('–§—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥–∞ - –∑–∞–ø—É—â–µ–Ω–∞')
    bot = Bot(TOKEN, parse_mode="html")
    while flag_time_sleep:
        #message.answer
        date1 = datetime.datetime.now().strftime('%H:%M')
        if date1[0:2] == '8' and date1[3:5] == '00':
            weeknum = datetime.datetime.now().isocalendar()[2] % 2
            daynum = datetime.datetime.now().isocalendar()[2]
            
            select_weather_schedule_sql = """SELECT id_user from users"""
            select_weather_schedule = cursor.execute(select_weather_schedule_sql, ).fetchall()
            for i in select_weather_schedule:
                
                #print(i[0])
                group_name_users = """SELECT group_name from users where id_user =: id_user"""
                records = cursor.execute(group_name_users, [i[0]]).fetchall()
                if records[0][0] != None:
                    group_name = records[0][0]
                    sql = """SELECT * FROM schedule WHERE lower(group_name) = lower(:group_name) AND day_number = :daynum and week = :weeknum ORDER BY number_lesson"""
                    num = cursor.execute(sql,
                                         {'group_name': group_name, 'daynum': daynum, 'weeknum': weeknum}).fetchall()
                    
                    #print(records[0][0], daynum, weeknum)
                    #try –∏ except –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø—Ä–∏ –æ—Å—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —á–∞—Ç–∞ —Å —á–µ–ª–æ–≤–µ–∫–æ–º –Ω–æ 
                    # –Ω–∞–ª–∏—á–∏–∏ –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –∏ –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏—Ä—ã–≤–∞—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ 
                    if num:
                        
                        try:
                            await bot.send_message(i[0],f'–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∏ –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n')
                        except:
                            continue
                        for row in num:
                            
                            #print(row)
                            await bot.send_message(i[0],
                                                   f'<u><b>{row[1]} –ø–∞—Ä–∞ - {lesson_time[row[1]]}</b></u>:\n'
                                                   f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {row[2]}\n<b>–ü—Ä–µ–ø–æ–¥.:</b> {row[4]}\n'
                                                   f'<b>–§–æ—Ä–º–∞—Ç: </b>{row[3]}\n<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {row[5]}')
                            # bot.send_message(message.chat.id, f"http://r.sf-misis.ru/group/{num[0][0]}")
                    
                    else:
                    #     #–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã–≤–æ–¥–∏—Ç—å –ø–æ–≥–æ–¥—É —É—Ç—Ä–æ–º –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å else –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–∏—Ç—å
                    #     await bot.send_message(i[0],f'–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–£ –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–∞—Ä!')
                    #     print("–ù–µ—Ç—É –ø–∞—Ä —Å–µ–≥–æ–¥–Ω—è")
                        continue

                else:
                    
                    group_name_users = """SELECT lower(FIO) from users where id_user =: id_user"""
                    records = cursor.execute(group_name_users, [i[0]]).fetchall()
                    teachers = records[0][0]
                    sql = """SELECT * FROM schedule WHERE lower(teacher) = lower(:teachers) AND day_number = :daynum and week = :weeknum ORDER BY number_lesson"""
                    num = cursor.execute(sql, {'teachers': teachers, 'daynum': daynum, 'weeknum': weeknum}).fetchall()
                    #print(records[0][0], daynum, weeknum)
                    d = {}
                    for row in num:
                        key = f"{row[1]} {row[2]}"
                        if key in d:
                            d[key].append(row[0])
                        else:
                            d[key] = [row[0]]

                    if num:
                        
                        await bot.send_message(i[0],f'–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∏ –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n')
                        for row in num:
                            key = f"{row[1]} {row[2]}"
                            if not d[key]:
                                continue
                            await bot.send_message(i[0],
                                                   f'<u><b>{row[1]} –ø–∞—Ä–∞ - {lesson_time[row[1]]}:</b></u>\n'
                                                   f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {row[2]}\n<b>–ì—Ä—É–ø–ø–∞(—ã):</b> {", ".join(d[key])}\n'
                                                   f'<b>–§–æ—Ä–º–∞—Ç:</b> {row[3]}\n<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {row[5]}')
                            #print(
                             #   f'{row[1]} –ø–∞—Ä–∞ - {lesson_time[row[1]]}:\n{row[2]}\n{", ".join(d[key])}\n{row[3]}\n{row[5]}')
                            d[key] = []

                        # bot.send_message(message.chat.id, f"http://r.sf-misis.ru/teacher/{num[0][0]}")
                    else:
                    #     #await bot.send_message(i[0],f'–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–£ –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–∞—Ä!')
                    #     #print("–ù–µ—Ç—É –ø–∞—Ä —Å–µ–≥–æ–¥–Ω—è")
                        continue
                try:
                    
                    config_dict = get_default_config()
                    config_dict['language'] = 'RU'
                    mgr = owm.weather_manager()
                    observation = mgr.weather_at_place('–°—Ç–∞—Ä—ã–π –û—Å–∫–æ–ª')
                    w = observation.weather
                    temp = w.temperature('celsius')['temp']
                    Wind = w.wind()
                    # –§–æ—Ä–º—É–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –≥–æ—Å—Ç—É 
                    effective_temp = 13.12 + 0.6215 * temp - 11.37 * ((1.5 * Wind["speed"]) ** 0.16)+ 0.3965 * temp * ((1.5 * Wind["speed"]) ** 0.16) 
                    effective_temp=round(effective_temp, 1)
                    Feeling_weather = '–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ' + str(effective_temp) + '¬∞C'
                    try:
                        await bot.send_message(i[0],
                                           '–ù–∞ —É–ª–∏—Ü–µ —Å–µ–π—á–∞—Å ' + str(
                                               w.detailed_status) + '\nüå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–µ–π—á–∞—Å –≤ —Ä–∞–π–æ–Ω–µ ' + str(
                                               int(temp)) + ' ¬∞C\n' + 'üå¨–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ = ' + str(
                                               Wind['speed']) + ' –º/—Å\n' + Feeling_weather) 
                    except:
                        print("–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
                        continue
                except Exception:
                    print("EROR weather")
                    await bot.send_message(i[0],
                                           '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –Ω–µ—Ç —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ–≥–æ–¥—ã!')

        await asyncio.sleep(60)
#-
async def delete_time_sleep_notifications(message: Message):
    """–£–±—Ä–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–∞—Ö –ø–∞—Ä

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
    str_select_time_sleep = None
    select_time_sleep_sql = """SELECT notifications from users where id_user =: id_user"""
    select_time_sleep = cursor.execute(select_time_sleep_sql, [message.chat.id]).fetchall()
    #print(message.chat.id)
    update_time_sleep_sql = """UPDATE users SET notifications =: notifications where id_user =: id_user"""
    data_tuple = {'notifications': str_select_time_sleep, 'id_user': message.chat.id}
    cursor.execute(update_time_sleep_sql, data_tuple)
    conn.commit()
    #print('–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã', '====', str_select_time_sleep)

#–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π  –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏
#-
async def send_like_message(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π  –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ 

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
       
    bot = Bot(TOKEN, parse_mode="html")
    search_like_message=True
    await message.answer('–§—É–Ω–∫—Ü–∏—è send_like_message - –∑–∞–ø—É—â–µ–Ω–∞!')
    while search_like_message==True:
        group_name = """" SELECT group_name from users where id_user = 411892636"""
        select_like_message = f"""SELECT * from starostat_news  where id_news in ( select id_news
from (select INSTR(b.news_view, a.id_news) as newss, b.news_view, a.id_news from starostat_news a, users b where id_user =: id_user and (text like '%{group_name}%' )))"""
        print("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã=" + group_name)
        #update_rownum = """UPDATE users SET news_view =: news_rownum_news where id_user =: id_user"""
        #select_like_message = cursor.execute(update_rownum,
        #                                        {'news_rownum_news': select_like_message, 'id_user': id_user})
        #conn.commit()
        records = cursor.execute(select_like_message, ).fetchall()
        print(records)
        await message.answer(f'{records[3]}\n {records[1]} - {records[2]}\n{records[4]}')
        await asyncio.sleep(10)
    
    #SELECT group_name from users where id_user = 411892636
#-  
async def send_like_message_off(message: Message):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–∞–≤–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
    search_like_message=False
    await message.answer('–§—É–Ω–∫—Ü–∏—è send_like_message - –æ—Ç–∫–ª—é—á–µ–Ω–∞!')
    
async def time_sleep_notifications(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–∞—Ä–∞—Ö –ø–µ—Ä–µ–¥ –ø–∞—Ä –Ω–∏–º–∏ 

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
    flag_time_sleep = True
    bot = Bot(TOKEN, parse_mode="html")
    await message.answer('–§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –∑–∞–ø—É—â–µ–Ω–∞!')
    # –î–µ–ª–∞–µ–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    while flag_time_sleep == True:
        select_time_sleep_sql = """SELECT id_user,group_name,FIO,notifications from users"""
        select_time_sleep = cursor.execute(select_time_sleep_sql, ).fetchall()
        #print(select_time_sleep)
        for j in range(0, len(select_time_sleep)):
            str_select_time_sleep = select_time_sleep[j][3]
            if str_select_time_sleep is None:
                continue
            for time_sleep_one in str_select_time_sleep.split(','):
                #print(time_sleep_one)
                # –£–∑–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è, –¥–∞—Ç—É –∏ –Ω–µ–¥–µ–ª—é
                date1 = datetime.datetime.now().strftime('%H:%M')
                weeknum = datetime.datetime.now().isocalendar().week % 2
                daynum = datetime.datetime.now().isocalendar().weekday

                text_lesson = None

                group_name = select_time_sleep[j][1]
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç—É–¥–µ–Ω—Ç

                #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç—É–¥–µ–Ω—Ç

                if group_name is not None:
                    #print(group_name)
                    sql = """SELECT number_lesson FROM schedule WHERE lower(group_name) = lower(:group_name) AND day_number = :daynum and week = :weeknum ORDER BY number_lesson"""
                    num = cursor.execute(sql,
                                         {'group_name': group_name, 'daynum': daynum, 'weeknum': weeknum}).fetchall()
                    for i in num:
                        # print(i[0])
                        number_l = i[0]
                        date_delta = (int(lesson_time[number_l][0:2]) * 60 + int(lesson_time[number_l][3:5])) - (
                                int(date1[0:2]) * 60 + int(date1[3:5]))
                        text_lesson = [f'–£ –≤–∞—Å —á–µ—Ä–µ–∑ {time_sleep_one} –º–∏–Ω—É—Ç –Ω–∞—á–Ω–µ—Ç—Å—è:' if date_delta == int(
                            time_sleep_one) else 'None'][0]

                        # –ï—Å–ª–∏ –ø–æ—Ä–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if text_lesson != 'None':
                            lesson_sql = """SELECT * from schedule where lower(group_name) = lower(:group_name) AND day_number = :daynum and week = :weeknum and number_lesson = :number_lesson"""
                            lesson = cursor.execute(lesson_sql,
                                                    {'group_name': group_name, 'daynum': daynum, 'weeknum': weeknum,
                                                     'number_lesson': number_l}).fetchall()
                            for row in lesson:
                                #print(row)
                                await bot.send_message(select_time_sleep[j][0],
                                              f'{text_lesson}\n'
                                              f'<u><b>{row[1]} –ø–∞—Ä–∞ - {lesson_time[row[1]]}</b></u>:\n'
                                              f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {row[2]}\n<b>–ü—Ä–µ–ø–æ–¥.:</b> {row[4]}\n'
                                              f'<b>–§–æ—Ä–º–∞—Ç: </b>{row[3]}\n<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {row[5]}')
                            text_lesson = None

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
                else:
                    teachers = select_time_sleep[j][2]
                    #print(teachers)
                    sql = """SELECT DISTINCT (number_lesson) FROM schedule WHERE lower(teacher) = lower(:teachers) AND day_number = :daynum and week = :weeknum ORDER BY number_lesson"""
                    num = cursor.execute(sql, {'teachers': teachers, 'daynum': daynum, 'weeknum': weeknum}).fetchall()
                    #print(num)
                    d = {}
                    for i in num:
                        # print(i[0])
                        number_l = i[0]
                        date_delta = (int(lesson_time[number_l][0:2]) * 60 + int(lesson_time[number_l][3:5])) - (
                                int(date1[0:2]) * 60 + int(date1[3:5]))
                        text_lesson = [f'–£ –≤–∞—Å —á–µ—Ä–µ–∑ {time_sleep_one} –º–∏–Ω—É—Ç –Ω–∞—á–Ω–µ—Ç—Å—è:' if date_delta == int(
                            time_sleep_one) else 'None'][0]

                        # –ï—Å–ª–∏ –ø–æ—Ä–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if text_lesson != 'None':
                            lesson_sql = """SELECT * FROM schedule WHERE lower(teacher) = lower(:teachers) AND day_number = :daynum and week = :weeknum and number_lesson = :number_lesson ORDER BY number_lesson"""
                            lesson = cursor.execute(lesson_sql,
                                                    {'teachers': teachers, 'daynum': daynum, 'weeknum': weeknum,
                                                     'number_lesson': number_l}).fetchall()
                            for row in lesson:
                                key = f"{row[1]} {row[2]}"
                                if key in d:
                                    d[key].append(row[0])
                                else:
                                    d[key] = [row[0]]

                            if lesson:
                                for row in lesson:
                                    key = f"{row[1]} {row[2]}"
                                    if not d[key]:
                                        continue
                                    await bot.send_message(select_time_sleep[j][0],
                                                  f'{text_lesson}\n'
                                                  f'<u><b>{row[1]} –ø–∞—Ä–∞ - {lesson_time[row[1]]}:</b></u>\n'
                                                  f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {row[2]}\n<b>–ì—Ä—É–ø–ø–∞(—ã):</b> {", ".join(d[key])}\n'
                                                  f'<b>–§–æ—Ä–º–∞—Ç:</b> {row[3]}\n<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {row[5]}')
                                    # print(
                                    #    f'{row[1]} –ø–∞—Ä–∞ - {lesson_time[row[1]]}:\n{row[2]}\n{", ".join(d[key])}\n{row[3]}\n{row[5]}')
                                    d[key] = []
                    text_lesson = None
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                #print(f"–ò—Ç–µ—Ä–∞—Ü–∏—è - {select_time_sleep[j][0]} ---- {text_lesson} --- {time_sleep_one}")
        await asyncio.sleep(60)

#-
# –°–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏, –ø—É—Ç–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
async def time_sleep_notifications_add(time_sleep, message: Message, state: FSMContext):
    """–í–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è

    Args:
        time_sleep (_type_): –í—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö
    """    
    print("–ù—É–∂–Ω–∞—è –º–Ω–µ –∏–Ω—Ñ–∞")
    print(state)
    print("–ù—É–∂–Ω–∞—è –º–Ω–µ –∏–Ω—Ñ–∞ –∫–æ–Ω—á–∏–ª–∞—Å—å")
    try:

        test_time_sleep = int(time_sleep)
        str_select_time_sleep = time_sleep

        text_lesson = None
        select_time_sleep_sql = """SELECT notifications from users where id_user =: id_user"""
        select_time_sleep = cursor.execute(select_time_sleep_sql, [message.from_user.id]).fetchall()
        if select_time_sleep[0][0] is None:
            update_time_sleep_sql = """UPDATE users SET notifications =: notifications where id_user =: id_user"""
            data_tuple = {'notifications': time_sleep, 'id_user': message.from_user.id}
            cursor.execute(update_time_sleep_sql, data_tuple)
            conn.commit()
        else:
            for select_time in select_time_sleep:
                str_select_time_sleep = str(select_time[0]) + ',' + str(str_select_time_sleep)
            update_time_sleep_sql = """UPDATE users SET notifications =: notifications where id_user =: id_user"""
            data_tuple = {'notifications': str_select_time_sleep, 'id_user': message.from_user.id}
            cursor.execute(update_time_sleep_sql, data_tuple)
            conn.commit()


        await message.answer(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ {time_sleep} –º–∏–Ω—É—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã')
        await state.clear()

    except:
        await state.clear()
        await message.answer('–í—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')

@form_router.message(commands={"cancel"})
@form_router.message(F.text.casefold() == "cancel")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    """ 
    –ü—Ä–∏—Ä—ã–≤–∞–Ω–∏–µ —à–∞–≥–æ–≤ –∫–∞–∫–æ–≥–æ –ª–∏–±–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ–ª–µ–µ –ø—Ä–æ–¥–æ–±–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç—É—Ç
        https://mastergroosha.github.io/telegram-tutorial-2/fsm/
        –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ—Ç —ç—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
       –ø—Ä–æ—à–ª—ã–π –∫–æ–º–º–µ–Ω—Ç  Allow user to cancel any action(–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–º–µ–Ω–∏—Ç—å –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ)
    Args:
        message (Message): _description_
        state (FSMContext): _description_
    """    
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info("Cancelling state %r", current_state)
    await state.clear()
    await message.answer(
        "Cancelled.",
        reply_markup=ReplyKeyboardRemove(),
    )

# –≠—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å–≤–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ
#-
@form_router.message(Form.type_group_teacher, F.text == "–°—Ç—É–¥–µ–Ω—Ç")
async def process_type_group(message: Message, state: FSMContext) -> None:
    """–≠—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å–≤–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞

    Args:
         message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö
    """    
    await state.update_data(type_group_teacher=message.text)
    #print(message.text)
    await state.set_state(Form.name)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ - '–ê–¢-18-1–¥'", reply_markup=ReplyKeyboardRemove())

#-
@form_router.message(Form.type_group_teacher, F.text == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
async def process_type_teacher(message: Message, state: FSMContext) -> None:
    """–≠—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å–≤–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª–µ–π

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö
    """  
    User = await state.update_data(type_group_teacher=message.text)
    await state.set_state(Form.name)
    builder_teacher = [
        [KeyboardButton(text='–¶—ã–≥–∞–Ω–∫–æ–≤ –Æ—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á'), KeyboardButton(text='–°–æ–ª–æ–≤—å–µ–≤ –ê–Ω—Ç–æ–Ω –Æ—Ä—å–µ–≤–∏—á')]]
    markup_teacher = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=builder_teacher)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ –ø–æ–ª–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.', reply_markup=markup_teacher)


@form_router.message(Form.name)
async def process_name(message: Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –≥—Ä—É–ø–ø–∞–º –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—è–º –∏ –∑–∞–ø—É—Å–∫ –Ω—É–∂–Ω–æ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç–∞—Ä—Ü–∏–∏

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö
    """    
    User = await state.update_data(name=message.text)
    id_user = message.from_user.id
    if User['type_group_teacher'] == '–°—Ç—É–¥–µ–Ω—Ç':
        student_check_sql = """SELECT group_name from groups where lower(group_name) = lower(:group_name)"""
        student_check = cursor.execute(student_check_sql, [message.text]).fetchall()
        #print(student_check)
        if student_check:
            await insert_varible_into_table_group(id_user, User['name'], message)
            #print(User['name'])
            await state.clear()
        else:
            await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞')
            await command_start_handler(message, state)
    else:
        student_check_sql = """SELECT FIO from teachers where lower(FIO) = lower(:FIO)"""
        student_check = cursor.execute(student_check_sql, [message.text]).fetchall()
        #print(student_check)
        if student_check:
            await insert_varible_into_table_teacher(id_user, User['name'], message)
            #print(User['name'])
            await state.clear()
        else:
            await command_start_handler(message, state)
            await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞')

@form_router.message(Form.time_sleep_notifications)
async def process_time_sleep_notifications(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π –≤–∫–ª—é—á–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Å—Ç–∞–¥–∏–π 

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö
    """    
    time_state = await state.update_data(time_sleep_notifications=message.text)
    await time_sleep_notifications_add(time_state['time_sleep_notifications'], message, state)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@form_router.callback_query(lambda c: c.data)
async def call_handle(call: types.callback_query) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)

    Args:
        call (types.callback_query): –û—Ç–≤–µ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–≤–æ–µ–Ω –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–µ –∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤–µ—Ä–Ω—ë—Ç—Å—è 
        –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """    
    if call.data == 'monday0':
        #print('one')
        weeknum = 0
        daynum = 1
        name_daynum = '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
        await call.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {name_daynum}')
        await call.message.edit_text(f'–ü–∞—Ä—ã –≤ {name_daynum} –ø–æ —á–∏—Å–ª–∏—Ç–µ–ª—é: ',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[]]))
        await schedule(call.from_user.id, daynum, weeknum, call.message)
    elif call.data == 'tuesday0':
        weeknum = 0
        daynum = 2
        name_daynum = '–í—Ç–æ—Ä–Ω–∏–∫'
        await call.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {name_daynum}')
        await call.message.edit_text(f'–ü–∞—Ä—ã –≤ {name_daynum} –ø–æ —á–∏—Å–ª–∏—Ç–µ–ª—é: ',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[]]))
        await schedule(call.from_user.id, daynum, weeknum, call.message)
    elif call.data == 'wednesday0':
        weeknum = 0
        daynum = 3
        name_daynum = '–°—Ä–µ–¥—É'
        await call.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {name_daynum}')
        await call.message.edit_text(f'–ü–∞—Ä—ã –≤ {name_daynum} –ø–æ —á–∏—Å–ª–∏—Ç–µ–ª—é: ',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[]]))
        await schedule(call.from_user.id, daynum, weeknum, call.message)
    elif call.data == 'thrusday0':
        weeknum = 0
        daynum = 4
        name_daynum = '–ß–µ—Ç–≤–µ—Ä–≥'
        await call.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {name_daynum}')
        await call.message.edit_text(f'–ü–∞—Ä—ã –≤ {name_daynum} –ø–æ —á–∏—Å–ª–∏—Ç–µ–ª—é: ',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[]]))
        await schedule(call.from_user.id, daynum, weeknum, call.message)
    elif call.data == 'friday0':
        weeknum = 0
        daynum = 5
        name_daynum = '–ü—è—Ç–Ω–∏—Ü—É'
        await call.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {name_daynum}')
        await call.message.edit_text(f'–ü–∞—Ä—ã –≤ {name_daynum} –ø–æ —á–∏—Å–ª–∏—Ç–µ–ª—é: ',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[]]))
        await schedule(call.from_user.id, daynum, weeknum, call.message)
    elif call.data == 'saturday0':
        weeknum = 0
        daynum = 6
        name_daynum = '–°—É–±–±–æ—Ç—É'
        await call.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {name_daynum}')
        await call.message.edit_text(f'–ü–∞—Ä—ã –≤ {name_daynum} –ø–æ —á–∏—Å–ª–∏—Ç–µ–ª—é: ',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[]]))
        await schedule(call.from_user.id, daynum, weeknum, call.message)
    elif call.data == 'monday1':
        weeknum = 1
        daynum = 1
        name_daynum = '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
        await call.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {name_daynum}')
        await call.message.edit_text(f'–ü–∞—Ä—ã –≤ {name_daynum} –ø–æ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é: ',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[]]))
        await schedule(call.from_user.id, daynum, weeknum, call.message)
    elif call.data == 'tuesday1':
        weeknum = 1
        daynum = 2
        name_daynum = '–í—Ç–æ—Ä–Ω–∏–∫'
        await call.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {name_daynum}')
        await call.message.edit_text(f'–ü–∞—Ä—ã –≤ {name_daynum} –ø–æ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é: ',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[]]))
        await schedule(call.from_user.id, daynum, weeknum, call.message)
    elif call.data == 'wednesday1':
        weeknum = 1
        daynum = 3
        name_daynum = '–°—Ä–µ–¥—É'
        await call.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {name_daynum}')
        await call.message.edit_text(f'–ü–∞—Ä—ã –≤ {name_daynum} –ø–æ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é: ',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[]]))
        await schedule(call.from_user.id, daynum, weeknum, call.message)
    elif call.data == 'thrusday1':
        weeknum = 1
        daynum = 4
        name_daynum = '–ß–µ—Ç–≤–µ—Ä–≥'
        await call.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {name_daynum}')
        await call.message.edit_text(f'–ü–∞—Ä—ã –≤ {name_daynum} –ø–æ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é: ',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[]]))
        await schedule(call.from_user.id, daynum, weeknum, call.message)
    elif call.data == 'friday1':
        weeknum = 1
        daynum = 5
        name_daynum = '–ü—è—Ç–Ω–∏—Ü—É'
        await call.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {name_daynum}')
        await call.message.edit_text(f'–ü–∞—Ä—ã –≤ {name_daynum} –ø–æ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é: ',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[]]))
        await schedule(call.from_user.id, daynum, weeknum, call.message)
    elif call.data == 'saturday1':
        weeknum = 1
        daynum = 6
        name_daynum = '–°—É–±–±–æ—Ç—É'
        await call.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {name_daynum}')
        await call.message.edit_text(f'–ü–∞—Ä—ã –≤ {name_daynum} –ø–æ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é: ',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[]]))
        await schedule(call.from_user.id, daynum, weeknum, call.message)
    elif call.data == 'today':
        weeknum = datetime.datetime.now().isocalendar().week % 2
        daynum = datetime.datetime.now().isocalendar().weekday
        await call.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
        await call.message.edit_text(f'–ü–∞—Ä—ã —Å–µ–≥–æ–¥–Ω—è: ',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[]]))
        await schedule(call.from_user.id, daynum, weeknum, call.message)
    elif call.data == 'off_notifications':
        await delete_time_sleep_notifications(call.message)
        await call.answer(f'–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã')
        await call.message.edit_text(f'–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã ',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[]]))
        #–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ—á–∏—â–∞—Ç—å –µ–≥–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –≤ –≤–∏–¥–µ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    elif call.data[:-2] == "starostat":
        await call.message.edit_text(f'–ù–æ–≤–æ—Å—Ç–∏ –∏–∑ —Å—Ç–∞—Ä–æ—Å—Ç–∞—Ç–∞')
        await news(call.from_user.id, call.message,call.data)
    elif call.data[:-2] == "group":
        await call.message.edit_text(f'–ù–æ–≤–æ—Å—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã')
        await news(call.from_user.id, call.message,call.data)
    elif call.data[:-2] == "job":
        await call.message.edit_text(f'–ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É')
        await news(call.from_user.id, call.message,call.data)
    
    else:
        print(call)


async def sleep_test():
    """—Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 
    """    
    flag = True
    count = 0
    while flag:
        #print(f"–ò—Ç–µ—Ä–∞—Ü–∏—è - {count}")

        count = count + 1
        await asyncio.sleep(1)

# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ /start
@form_router.message(commands={"start"})
async def command_start_handler(message: Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∞—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ 
    –∏–ª–∏ –∂–µ –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ª—é–¥—è–º —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç 

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö
    """    
    id_user = message.from_user.id
    print(message.from_user.id)
    group_name_users = """SELECT group_name from users where id_user =: id_user"""
    records = cursor.execute(group_name_users, [message.from_user.id]).fetchall()
    #print(records)
    if records:
        if message.from_user.id == 1005179687:
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. ".format(
                    message.from_user), reply_markup=markup_main_admin)
        else:
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n–Ø - <b>–ü–æ–º–æ—à–Ω–∏–∫</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ".format(
                    message.from_user), reply_markup=markup_main)
    else:
        builder_teacher_group = [[KeyboardButton(text='–°—Ç—É–¥–µ–Ω—Ç'), KeyboardButton(text='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')]]
        teacher_group = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=builder_teacher_group)
        await state.set_state(Form.type_group_teacher)
        await message.reply('–¢—ã –∫—Ç–æ?', reply_markup=teacher_group)

# –£–¥–∞–ª–µ–Ω–∏–µ –∞–∞–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã
@form_router.message(commands={"delete"})
async def delete_account(message: Message, state: FSMContext) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –±–¥ 

    Args:
        message (Message): –æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö
    """    
    delete_account_sql = """delete
                          users where id_user = :id_user"""
    id_user = message.from_user.id
    data_tuple = {'id_user': id_user}
    cursor.execute(delete_account_sql, data_tuple)
    conn.commit()
    builder_delete = [[KeyboardButton(text='/start')]]
    markup_delete = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=builder_delete)
    await message.answer('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
    await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ: /start', reply_markup=markup_delete)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@form_router.message(content_types=['text'])
async def text_button(message: Message, state: FSMContext) -> Any:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    Args:
        message (Message): –æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö

    Returns:
        Any: _description_
    """    
    if message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        builder_schedule = [[InlineKeyboardButton(text='–ü–ù', callback_data='monday0'),
                             InlineKeyboardButton(text="–í–¢", callback_data='tuesday0'),
                             InlineKeyboardButton(text='–°–†', callback_data='wednesday0'),
                             InlineKeyboardButton(text='–ß–¢', callback_data='thrusday0'),
                             InlineKeyboardButton(text='–ü–¢', callback_data='friday0'),
                             InlineKeyboardButton(text='–°–ë', callback_data='saturday0')],
                            [InlineKeyboardButton(text='–ü–ù', callback_data='monday1'),
                             InlineKeyboardButton(text="–í–¢", callback_data='tuesday1'),
                             InlineKeyboardButton(text='–°–†', callback_data='wednesday1'),
                             InlineKeyboardButton(text='–ß–¢', callback_data='thrusday1'),
                             InlineKeyboardButton(text='–ü–¢', callback_data='friday1'),
                             InlineKeyboardButton(text='–°–ë', callback_data='saturday1')],
                            [InlineKeyboardButton(text='–°–µ–≥–æ–¥–Ω—è', callback_data='today')]]
        schedule_markup = InlineKeyboardMarkup(inline_keyboard=builder_schedule)
        todayIs = _today() #–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        await message.answer(f'–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?\n–ß–∏—Å–ª–∏—Ç–µ–ª—å (–≤–µ—Ä—Ö)\–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å (–Ω–∏–∑)\n{todayIs}',
                             reply_markup=schedule_markup)
    elif message.text == '–ù–æ–≤–æ—Å—Ç–∏':
        builder_schedule = [[InlineKeyboardButton(text='–°—Ç–∞—Ä–æ—Å—Ç–∞—Ç 5', callback_data='starostat05'),
                             InlineKeyboardButton(text='–ì—Ä—É–ø–ø–∞ –í–∫ 5', callback_data='group05'),
                             InlineKeyboardButton(text='–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 5', callback_data='job05')],
                             [InlineKeyboardButton(text='–°—Ç–∞—Ä–æ—Å—Ç–∞—Ç 10', callback_data='starostat10'),
                             InlineKeyboardButton(text='–ì—Ä—É–ø–ø–∞ –í–∫ 10', callback_data='group10'),
                             InlineKeyboardButton(text='–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 10', callback_data='job10')]]
        schedule_markup = InlineKeyboardMarkup(inline_keyboard=builder_schedule)
        await message.answer(f'–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤–∞–º –Ω—É–∂–Ω—ã –∏ —Å–∫–æ–ª—å–∫–æ?\n',
                             reply_markup=schedule_markup)

        #await news(message.from_user.id, message)

        
    elif message.text == '1':
        await message.answer('–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–∏–Ω—è—Ç!')
        await update_news_table(message)
    elif message.text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        await state.set_state(Form.time_sleep_notifications)
        builder_time_lesson = [[InlineKeyboardButton(text='–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='off_notifications')]]
        time_lesson_markup = InlineKeyboardMarkup(inline_keyboard=builder_time_lesson)
        await message.answer('–ó–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø–∞—Ä–∞—Ö?\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö: ', reply_markup=time_lesson_markup)
    elif message.text == 'test':
        await time_sleep_notifications(message)
    elif message.text == '–ó–∞–ø—É—Å–∫ –ø–æ–≥–æ–¥—ã':
        await weather(message)
    elif message.text == 'üõé –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π':
        await time_sleep_notifications(message)
    elif message.text == '–ü—Ä–æ—Ñ–∏–ª—å':
        await lk(message)
    elif message.text == '–ó–∞–ø—É—Å–∫ –≤–∫ –≥—Ä—É–ø–ø':
        await vk_groups(message)
    elif message.text == '–ó–∞–ø—É—Å–∫ —Å–∫–ª–µ–π–∫–∏':
        await update_news_table(message)
    #–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å Sql –∑–∞–ø—Ä–æ—Å–æ–º  ORA-01008
    elif message.text == '–ó–∞–ø—É—Å–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏':
        await send_like_message(message)
    else:
        print('–ë—ã–≤–∞–µ—Ç')

def main() -> None:
    dp.include_router(form_router)
    bot = Bot(TOKEN, parse_mode="html")
    # And the run events dispatching
    dp.run_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
