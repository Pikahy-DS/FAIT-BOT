import logging
import asyncio
from re import search
import sys
from typing import Any
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, Dispatcher, types, F, Router, html
from aiogram.types import Message, KeyboardButton, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardMarkup, InlineKeyboardMarkup
import cx_Oracle
import config
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.storage.memory import MemoryStorage
import datetime
import time
from threading import Thread
import pyowm
from pyowm.utils.config import get_default_config
from vk_api import VkApi

#InlineKeyboardMarkup form_router schedule

import interaction_inside

form_router = Router()

class Form(StatesGroup):
    type_group_teacher = State()
    name = State()
    time_sleep_notifications = State()


TOKEN = config.TOKEN
dp = Dispatcher(storage=MemoryStorage())
conn = cx_Oracle.connect('hr/hr2020@ORCLPDB')
cursor = conn.cursor()
logger = logging.getLogger(__name__)
owm = pyowm.OWM(config.TOKEN_OWM)

lesson_time = {1: '09:00-10:30',
               2: '10:40-12:10',
               3: '12:40-14:10',
               4: '14:20-15:50',
               5: '16:00-17:30',
               6: '18:30-20:00',
               7: '20:10-21:40'}


builder_main = [[KeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
                 KeyboardButton(text='–ù–æ–≤–æ—Å—Ç–∏'),
                 KeyboardButton(text = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')],
                [KeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å')]]
markup_main = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=builder_main)
builder_main_admin = [[KeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
                 KeyboardButton(text='–ù–æ–≤–æ—Å—Ç–∏'),
                 KeyboardButton(text = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')],
                [KeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å')],[
                 KeyboardButton(text = '–ó–∞–ø—É—Å–∫ –ø–æ–≥–æ–¥—ã'),
                 KeyboardButton(text = 'üõé –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'),
                 KeyboardButton(text = '–ó–∞–ø—É—Å–∫ –≤–∫ –≥—Ä—É–ø–ø'),
                 KeyboardButton(text='–ó–∞–ø—É—Å–∫ —Å–∫–ª–µ–π–∫–∏')]]
markup_main_admin = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=builder_main_admin)



# + - 
async def getAttachments(msg, vk):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑  –ø–æ—Å—Ç–∞  –Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ –Ω–∞–¥–æ –±—É–¥–µ—Ç –µ—â—ë —Å —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è 

    Args:
        msg (_type_): _description_
        vk (_type_): _description_

    Returns:
        _type_: _description_
    """    
    attachList = []

    for att in msg['attachments'][0:]:

        attType = att.get('type')

        attachment = att[attType]

        if attType == 'photo':  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

            for photoType in attachment.get('sizes')[0:]:
                if photoType.get('type') == 'x':  # <=604x604
                    attachments = photoType.get('url')
                if photoType.get('type') == 'y':  # >605x605
                    attachments = photoType.get('url')
                if photoType.get('type') == 'z':  # <=1280x720
                    attachments = photoType.get('url')
                if photoType.get('type') == 'w':  # >1280x720
                    attachments = photoType.get('url')  # <=2560x1440
                    attType = 'other'

        elif attType == 'doc':  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:
            # –ü—Ä–æ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç—É—Ç: https://vk.com/dev/objects/doc
            docType = attachment.get('type')
            if docType != 3 and docType != 4 and docType != 5:
                attType = 'other'
            if attachment.get('url'):
                attachments = attachment.get('url')

        elif attType == 'sticker':  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã:
            for sticker in attachment.get('images')[0:]:
                # –ú–æ–∂–Ω–æ 256 –∏–ª–∏ 512, –Ω–æ –±—É–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –æ–≥—Ä–æ–º–Ω–∞—è –ø–∏–∫—á–∞
                if sticker.get('width') == 128:
                    attachments = sticker.get('url')

        elif attType == 'audio':
            attachments = str('ùÖ† ' + attachment.get('artist') + ' - ' +
                              attachment.get('title') + ' ùÖ†')
            attType = 'other'

        elif attType == 'audio_message':
            attachments = attachment.get('link_ogg')

        elif attType == 'video':

            ownerId = str(attachment.get('owner_id'))
            videoId = str(attachment.get('id'))
            accesskey = str(attachment.get('access_key'))

            fullURL = str(ownerId + '_' + videoId + '_' + accesskey)

            attachments = vk.video.get(videos=fullURL)['items'][0].get('player')

        elif attType == 'graffiti':
            attType = 'other'
            attachments = attachment.get('url')

        elif attType == 'link':
            attType = 'other'
            attachments = attachment.get('url')

        elif attType == 'wall':
            attType = 'other'
            attachments = 'https://vk.com/wall'
            from_id = str(attachment.get('from_id'))
            post_id = str(attachment.get('id'))
            attachments += from_id + '_' + post_id

        elif attType == 'wall_reply':
            attType = 'other'
            attachments = 'https://vk.com/wall'
            owner_id = str(attachment.get('owner_id'))
            reply_id = str(attachment.get('id'))
            post_id = str(attachment.get('post_id'))
            attachments += owner_id + '_' + post_id
            attachments += '?reply=' + reply_id

        elif attType == 'poll':
            attType = 'other'
            attachments = 'https://vk.com/poll'
            owner_id = str(attachment.get('owner_id'))
            poll_id = str(attachment.get('id'))
            attachments += owner_id + '_' + poll_id
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø?
        else:

            attachments = None

        attachList.append({'type': attType,
                           'link': attachments})

    # print( attachList )

    return attachList[0]


@form_router.message(commands={"cancel"})
@form_router.message(F.text.casefold() == "cancel")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    """ 
    –ü—Ä–∏—Ä—ã–≤–∞–Ω–∏–µ —à–∞–≥–æ–≤ –∫–∞–∫–æ–≥–æ –ª–∏–±–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ–ª–µ–µ –ø—Ä–æ–¥–æ–±–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç—É—Ç
        https://mastergroosha.github.io/telegram-tutorial-2/fsm/
        –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ—Ç —ç—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
       –ø—Ä–æ—à–ª—ã–π –∫–æ–º–º–µ–Ω—Ç  Allow user to cancel any action(–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–º–µ–Ω–∏—Ç—å –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ)
    Args:
        message (Message): _description_
        state (FSMContext): _description_
    """    
    await interaction_inside.cancel_handler(message,state)


# –≠—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å–≤–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ
#-
@form_router.message(Form.type_group_teacher, F.text == "–°—Ç—É–¥–µ–Ω—Ç")
async def process_type_group(message: Message, state: FSMContext) -> None:
    """–≠—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å–≤–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞

    Args:
         message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö
    """    
    await interaction_inside.process_type_group(message,state)
    

#-
@form_router.message(Form.type_group_teacher, F.text == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
async def process_type_teacher(message: Message, state: FSMContext) -> None:
    """–≠—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å–≤–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª–µ–π

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö
    """  
    await interaction_inside.process_type_teacher(message,state)


@form_router.message(Form.name)
async def process_name(message: Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –≥—Ä—É–ø–ø–∞–º –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—è–º –∏ –∑–∞–ø—É—Å–∫ –Ω—É–∂–Ω–æ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç–∞—Ä—Ü–∏–∏

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö
    """    
    await interaction_inside.process_name(message,state)

@form_router.message(Form.time_sleep_notifications)
async def process_time_sleep_notifications(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π –≤–∫–ª—é—á–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Å—Ç–∞–¥–∏–π 

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö
    """    
    await interaction_inside.process_time_sleep_notifications(message,state)

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@form_router.callback_query(lambda c: c.data)
async def call_handle(call: types.callback_query) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)

    Args:
        call (types.callback_query): –û—Ç–≤–µ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–≤–æ–µ–Ω –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–µ –∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤–µ—Ä–Ω—ë—Ç—Å—è 
        –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """ 
    await interaction_inside.call_handle(call)       

async def sleep_test():
    """—Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 
    """    
    flag = True
    count = 0
    while flag:
        print(f"–ò—Ç–µ—Ä–∞—Ü–∏—è - {count}")

        count = count + 1
        await asyncio.sleep(5)

# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ /start 
@form_router.message(commands={"start"})
async def command_start_handler(message: Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∞—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ 
    –∏–ª–∏ –∂–µ –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ª—é–¥—è–º —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç 

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö
    """    
    id_user = message.from_user.id
    print(message.from_user.id)
    group_name_users = """SELECT group_name from users where id_user =: id_user"""
    records = cursor.execute(group_name_users, [message.from_user.id]).fetchall()
    #print(records)
    if records:
        if message.from_user.id == 1005179687:
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. ".format(
                    message.from_user), reply_markup=markup_main_admin)
        else:
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n–Ø - <b>–ü–æ–º–æ—à–Ω–∏–∫</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ".format(
                    message.from_user), reply_markup=markup_main)
    else:
        builder_teacher_group = [[KeyboardButton(text='–°—Ç—É–¥–µ–Ω—Ç'), KeyboardButton(text='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')]]
        teacher_group = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=builder_teacher_group)
        await state.set_state(Form.type_group_teacher)
        await message.reply('–¢—ã –∫—Ç–æ?', reply_markup=teacher_group)

# –£–¥–∞–ª–µ–Ω–∏–µ –∞–∞–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã
@form_router.message(commands={"delete"})
async def delete_account(message: Message, state: FSMContext) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –±–¥ 

    Args:
        message (Message): –æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö
    """    
    delete_account_sql = """delete
                          users where id_user = :id_user"""
    id_user = message.from_user.id
    data_tuple = {'id_user': id_user}
    cursor.execute(delete_account_sql, data_tuple)
    conn.commit()
    builder_delete = [[KeyboardButton(text='/start')]]
    markup_delete = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=builder_delete)
    await message.answer('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
    await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ: /start', reply_markup=markup_delete)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@form_router.message(content_types=['text'])
async def text_button(message: Message, state: FSMContext) -> Any:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    Args:
        message (Message): –æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö

    Returns:
        Any: _description_
    """    
    await interaction_inside.text_button(message,state)

def main() -> None:
    dp.include_router(form_router)
    bot = Bot(TOKEN, parse_mode="html")
    # And the run events dispatching
    dp.run_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
