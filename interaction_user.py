import logging
import asyncio
from re import search
import sys
from typing import Any
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, Dispatcher, types, F, Router, html
from aiogram.types import Message, KeyboardButton, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardMarkup, InlineKeyboardMarkup
import cx_Oracle
import config
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.storage.memory import MemoryStorage
import datetime
import time
from threading import Thread
import pyowm
from pyowm.utils.config import get_default_config
from vk_api import VkApi


import interaction_inside
import main





#-
async def weather(message: Message):
    """–§—É–Ω–∫—Ü–∏—è  —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–≥–æ–¥—ã –∏ –ø–∞—Ä 

    Args:
        message (Message):  —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
    flag_time_sleep = True
    await message.answer('–§—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥–∞ - –∑–∞–ø—É—â–µ–Ω–∞')
    bot = Bot(main.TOKEN, parse_mode="html")
    while flag_time_sleep:
        #message.answer
        date1 = datetime.datetime.now().strftime('%H:%M')
        if date1[0:2] == '22' and date1[3:5] == '53':
            weeknum = datetime.datetime.now().isocalendar()[2] % 2
            daynum = datetime.datetime.now().isocalendar()[2]
            
            select_weather_schedule_sql = """SELECT id_user from users"""
            select_weather_schedule = main.cursor.execute(select_weather_schedule_sql, ).fetchall()
            for i in select_weather_schedule:
                
                #print(i[0])
                group_name_users = """SELECT group_name from users where id_user =: id_user"""
                records = main.cursor.execute(group_name_users, [i[0]]).fetchall()
                if records[0][0] != None:
                    group_name = records[0][0]
                    print(group_name)
                    sql = """SELECT * FROM schedule WHERE lower(group_name) = lower(:group_name) AND day_number = :daynum and week = :weeknum ORDER BY number_lesson"""
                    num = main.cursor.execute(sql,
                                         {'group_name': group_name, 'daynum': daynum, 'weeknum': weeknum}).fetchall()
                    
                    #print(records[0][0], daynum, weeknum)
                    #try –∏ except –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø—Ä–∏ –æ—Å—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —á–∞—Ç–∞ —Å —á–µ–ª–æ–≤–µ–∫–æ–º –Ω–æ 
                    # –Ω–∞–ª–∏—á–∏–∏ –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –∏ –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏—Ä—ã–≤–∞—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ 
                    
                    print("–¢–£–¢!")
                    print(num)
                    if num:
                        
                        try:
                            await bot.send_message(i[0],f'–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∏ –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n')
                        except:
                            continue
                        for row in num:
                            
                            #print(row)
                            await bot.send_message(i[0],
                                                   f'<u><b>{row[1]} –ø–∞—Ä–∞ - {main.lesson_time[row[1]]}</b></u>:\n'
                                                   f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {row[2]}\n<b>–ü—Ä–µ–ø–æ–¥.:</b> {row[4]}\n'
                                                   f'<b>–§–æ—Ä–º–∞—Ç: </b>{row[3]}\n<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {row[5]}')
                            # bot.send_message(message.chat.id, f"http://r.sf-misis.ru/group/{num[0][0]}")
                    
                    else:
                    #     #–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã–≤–æ–¥–∏—Ç—å –ø–æ–≥–æ–¥—É —É—Ç—Ä–æ–º –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å else –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–∏—Ç—å
                    #     await bot.send_message(i[0],f'–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–£ –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–∞—Ä!')
                    #     print("–ù–µ—Ç—É –ø–∞—Ä —Å–µ–≥–æ–¥–Ω—è")
                        continue

                else:
                    
                    group_name_users = """SELECT lower(FIO) from users where id_user =: id_user"""
                    records = main.cursor.execute(group_name_users, [i[0]]).fetchall()
                    teachers = records[0][0]
                    sql = """SELECT * FROM schedule WHERE lower(teacher) = lower(:teachers) AND day_number = :daynum and week = :weeknum ORDER BY number_lesson"""
                    num = main.cursor.execute(sql, {'teachers': teachers, 'daynum': daynum, 'weeknum': weeknum}).fetchall()
                    #print(records[0][0], daynum, weeknum)
                    d = {}
                    for row in num:
                        key = f"{row[1]} {row[2]}"
                        if key in d:
                            d[key].append(row[0])
                        else:
                            d[key] = [row[0]]

                    if num:
                        
                        await bot.send_message(i[0],f'–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∏ –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n')
                        for row in num:
                            key = f"{row[1]} {row[2]}"
                            if not d[key]:
                                continue
                            await bot.send_message(i[0],
                                                   f'<u><b>{row[1]} –ø–∞—Ä–∞ - {main.lesson_time[row[1]]}:</b></u>\n'
                                                   f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {row[2]}\n<b>–ì—Ä—É–ø–ø–∞(—ã):</b> {", ".join(d[key])}\n'
                                                   f'<b>–§–æ—Ä–º–∞—Ç:</b> {row[3]}\n<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {row[5]}')
                            #print(
                             #   f'{row[1]} –ø–∞—Ä–∞ - {lesson_time[row[1]]}:\n{row[2]}\n{", ".join(d[key])}\n{row[3]}\n{row[5]}')
                            d[key] = []

                        # bot.send_message(message.chat.id, f"http://r.sf-misis.ru/teacher/{num[0][0]}")
                    else:
                    #     #await bot.send_message(i[0],f'–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–£ –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–∞—Ä!')
                    #     #print("–ù–µ—Ç—É –ø–∞—Ä —Å–µ–≥–æ–¥–Ω—è")
                        continue
                try:
                    
                    config_dict = get_default_config()
                    config_dict['language'] = 'RU'
                    mgr = main.owm.weather_manager()
                    observation = mgr.weather_at_place('–°—Ç–∞—Ä—ã–π –û—Å–∫–æ–ª')
                    w = observation.weather
                    temp = w.temperature('celsius')['temp']
                    Wind = w.wind()
                    # –§–æ—Ä–º—É–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –≥–æ—Å—Ç—É 
                    effective_temp = 13.12 + 0.6215 * temp - 11.37 * ((1.5 * Wind["speed"]) ** 0.16)+ 0.3965 * temp * ((1.5 * Wind["speed"]) ** 0.16) 
                    effective_temp=round(effective_temp, 1)
                    Feeling_weather = '–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ' + str(effective_temp) + '¬∞C'
                    try:
                        await bot.send_message(i[0],
                                           '–ù–∞ —É–ª–∏—Ü–µ —Å–µ–π—á–∞—Å ' + str(
                                               w.detailed_status) + '\nüå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–µ–π—á–∞—Å –≤ —Ä–∞–π–æ–Ω–µ ' + str(
                                               int(temp)) + ' ¬∞C\n' + 'üå¨–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ = ' + str(
                                               Wind['speed']) + ' –º/—Å\n' + Feeling_weather) 
                    except:
                        print("–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
                        continue
                except Exception:
                    print("EROR weather")
                    await bot.send_message(i[0],
                                           '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –Ω–µ—Ç —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ–≥–æ–¥—ã!')

        await asyncio.sleep(60)
#-
async def delete_time_sleep_notifications(message: Message):
    """–£–±—Ä–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–∞—Ö –ø–∞—Ä

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
    str_select_time_sleep = None
    select_time_sleep_sql = """SELECT notifications from users where id_user =: id_user"""
    select_time_sleep = main.cursor.execute(select_time_sleep_sql, [message.chat.id]).fetchall()
    #print(message.chat.id)
    update_time_sleep_sql = """UPDATE users SET notifications =: notifications where id_user =: id_user"""
    data_tuple = {'notifications': str_select_time_sleep, 'id_user': message.chat.id}
    main.cursor.execute(update_time_sleep_sql, data_tuple)
    main.conn.commit()
    #print('–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã', '====', str_select_time_sleep)

#–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π  –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏
#-
async def send_like_message(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π  –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ 

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
       
    bot = Bot(main.TOKEN, parse_mode="html")
    search_like_message=True
    await message.answer('–§—É–Ω–∫—Ü–∏—è send_like_message - –∑–∞–ø—É—â–µ–Ω–∞!')
    while search_like_message==True:
        group_name = """" SELECT group_name from users where id_user = 411892636"""
        select_like_message = f"""SELECT * from starostat_news  where id_news in ( select id_news
from (select INSTR(b.news_view, a.id_news) as newss, b.news_view, a.id_news from starostat_news a, users b where id_user =: id_user and (text like '%{group_name}%' )))"""
        print("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã=" + group_name)
        #update_rownum = """UPDATE users SET news_view =: news_rownum_news where id_user =: id_user"""
        #select_like_message = cursor.execute(update_rownum,
        #                                        {'news_rownum_news': select_like_message, 'id_user': id_user})
        #conn.commit()
        records = main.cursor.execute(select_like_message, ).fetchall()
        print(records)
        await message.answer(f'{records[3]}\n {records[1]} - {records[2]}\n{records[4]}')
        await asyncio.sleep(10)
    
    #SELECT group_name from users where id_user = 411892636
#-  
async def send_like_message_off(message: Message):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–∞–≤–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
    search_like_message=False
    await message.answer('–§—É–Ω–∫—Ü–∏—è send_like_message - –æ—Ç–∫–ª—é—á–µ–Ω–∞!')
    
async def time_sleep_notifications(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–∞—Ä–∞—Ö –ø–µ—Ä–µ–¥ –ø–∞—Ä –Ω–∏–º–∏ 

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
    flag_time_sleep = True
    bot = Bot(main.TOKEN, parse_mode="html")
    await message.answer('–§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –∑–∞–ø—É—â–µ–Ω–∞!')
    # –î–µ–ª–∞–µ–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    while flag_time_sleep == True:
        select_time_sleep_sql = """SELECT id_user,group_name,FIO,notifications from users"""
        select_time_sleep = main.cursor.execute(select_time_sleep_sql, ).fetchall()
        #print(select_time_sleep)
        for j in range(0, len(select_time_sleep)):
            str_select_time_sleep = select_time_sleep[j][3]
            if str_select_time_sleep is None:
                continue
            for time_sleep_one in str_select_time_sleep.split(','):
                #print(time_sleep_one)
                # –£–∑–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è, –¥–∞—Ç—É –∏ –Ω–µ–¥–µ–ª—é
                date1 = datetime.datetime.now().strftime('%H:%M')
                weeknum = datetime.datetime.now().isocalendar().week % 2
                daynum = datetime.datetime.now().isocalendar().weekday

                text_lesson = None

                group_name = select_time_sleep[j][1]
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç—É–¥–µ–Ω—Ç

                #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç—É–¥–µ–Ω—Ç

                if group_name is not None:
                    #print(group_name)
                    sql = """SELECT number_lesson FROM schedule WHERE lower(group_name) = lower(:group_name) AND day_number = :daynum and week = :weeknum ORDER BY number_lesson"""
                    num = main.cursor.execute(sql,
                                         {'group_name': group_name, 'daynum': daynum, 'weeknum': weeknum}).fetchall()
                    for i in num:
                        # print(i[0])
                        number_l = i[0]
                        date_delta = (int(main.lesson_time[number_l][0:2]) * 60 + int(main.lesson_time[number_l][3:5])) - (
                                int(date1[0:2]) * 60 + int(date1[3:5]))
                        text_lesson = [f'–£ –≤–∞—Å —á–µ—Ä–µ–∑ {time_sleep_one} –º–∏–Ω—É—Ç –Ω–∞—á–Ω–µ—Ç—Å—è:' if date_delta == int(
                            time_sleep_one) else 'None'][0]

                        # –ï—Å–ª–∏ –ø–æ—Ä–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if text_lesson != 'None':
                            lesson_sql = """SELECT * from schedule where lower(group_name) = lower(:group_name) AND day_number = :daynum and week = :weeknum and number_lesson = :number_lesson"""
                            lesson = main.cursor.execute(lesson_sql,
                                                    {'group_name': group_name, 'daynum': daynum, 'weeknum': weeknum,
                                                     'number_lesson': number_l}).fetchall()
                            for row in lesson:
                                #print(row)
                                await bot.send_message(select_time_sleep[j][0],
                                              f'{text_lesson}\n'
                                              f'<u><b>{row[1]} –ø–∞—Ä–∞ - {main.lesson_time[row[1]]}</b></u>:\n'
                                              f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {row[2]}\n<b>–ü—Ä–µ–ø–æ–¥.:</b> {row[4]}\n'
                                              f'<b>–§–æ—Ä–º–∞—Ç: </b>{row[3]}\n<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {row[5]}')
                            text_lesson = None

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
                else:
                    teachers = select_time_sleep[j][2]
                    #print(teachers)
                    sql = """SELECT DISTINCT (number_lesson) FROM schedule WHERE lower(teacher) = lower(:teachers) AND day_number = :daynum and week = :weeknum ORDER BY number_lesson"""
                    num = main.cursor.execute(sql, {'teachers': teachers, 'daynum': daynum, 'weeknum': weeknum}).fetchall()
                    #print(num)
                    d = {}
                    for i in num:
                        # print(i[0])
                        number_l = i[0]
                        date_delta = (int(main.lesson_time[number_l][0:2]) * 60 + int(main.lesson_time[number_l][3:5])) - (
                                int(date1[0:2]) * 60 + int(date1[3:5]))
                        text_lesson = [f'–£ –≤–∞—Å —á–µ—Ä–µ–∑ {time_sleep_one} –º–∏–Ω—É—Ç –Ω–∞—á–Ω–µ—Ç—Å—è:' if date_delta == int(
                            time_sleep_one) else 'None'][0]

                        # –ï—Å–ª–∏ –ø–æ—Ä–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if text_lesson != 'None':
                            lesson_sql = """SELECT * FROM schedule WHERE lower(teacher) = lower(:teachers) AND day_number = :daynum and week = :weeknum and number_lesson = :number_lesson ORDER BY number_lesson"""
                            lesson = main.cursor.execute(lesson_sql,
                                                    {'teachers': teachers, 'daynum': daynum, 'weeknum': weeknum,
                                                     'number_lesson': number_l}).fetchall()
                            for row in lesson:
                                key = f"{row[1]} {row[2]}"
                                if key in d:
                                    d[key].append(row[0])
                                else:
                                    d[key] = [row[0]]

                            if lesson:
                                for row in lesson:
                                    key = f"{row[1]} {row[2]}"
                                    if not d[key]:
                                        continue
                                    await bot.send_message(select_time_sleep[j][0],
                                                  f'{text_lesson}\n'
                                                  f'<u><b>{row[1]} –ø–∞—Ä–∞ - {main.lesson_time[row[1]]}:</b></u>\n'
                                                  f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {row[2]}\n<b>–ì—Ä—É–ø–ø–∞(—ã):</b> {", ".join(d[key])}\n'
                                                  f'<b>–§–æ—Ä–º–∞—Ç:</b> {row[3]}\n<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {row[5]}')
                                    # print(
                                    #    f'{row[1]} –ø–∞—Ä–∞ - {lesson_time[row[1]]}:\n{row[2]}\n{", ".join(d[key])}\n{row[3]}\n{row[5]}')
                                    d[key] = []
                    text_lesson = None
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                #print(f"–ò—Ç–µ—Ä–∞—Ü–∏—è - {select_time_sleep[j][0]} ---- {text_lesson} --- {time_sleep_one}")
        await asyncio.sleep(60)

#-
# –°–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏, –ø—É—Ç–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
async def time_sleep_notifications_add(time_sleep, message: Message, state: FSMContext):
    """–í–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è

    Args:
        time_sleep (_type_): –í—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        state (FSMContext): —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–≥–∏ –∏ –ø—Ä–æ—à–ª—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö
    """    
    print("–ù—É–∂–Ω–∞—è –º–Ω–µ –∏–Ω—Ñ–∞")
    print(state)
    print("–ù—É–∂–Ω–∞—è –º–Ω–µ –∏–Ω—Ñ–∞ –∫–æ–Ω—á–∏–ª–∞—Å—å")
    try:

        test_time_sleep = int(time_sleep)
        str_select_time_sleep = time_sleep

        text_lesson = None
        select_time_sleep_sql = """SELECT notifications from users where id_user =: id_user"""
        select_time_sleep = main.cursor.execute(select_time_sleep_sql, [message.from_user.id]).fetchall()
        if select_time_sleep[0][0] is None:
            update_time_sleep_sql = """UPDATE users SET notifications =: notifications where id_user =: id_user"""
            data_tuple = {'notifications': time_sleep, 'id_user': message.from_user.id}
            main.cursor.execute(update_time_sleep_sql, data_tuple)
            main.conn.commit()
        else:
            for select_time in select_time_sleep:
                str_select_time_sleep = str(select_time[0]) + ',' + str(str_select_time_sleep)
            update_time_sleep_sql = """UPDATE users SET notifications =: notifications where id_user =: id_user"""
            data_tuple = {'notifications': str_select_time_sleep, 'id_user': message.from_user.id}
            main.cursor.execute(update_time_sleep_sql, data_tuple)
            main.conn.commit()


        await message.answer(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ {time_sleep} –º–∏–Ω—É—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã')
        await state.clear()

    except:
        await state.clear()
        await message.answer('–í—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
